
后台子进程死的太快，来不及fg／bg就delete了。

哈哈，写完了。这次实验是自己独立完成的：
  1. Eval 函数呢是调用解析函数和内置／可执行文件的
  2.waitfg呢是要用busy loop而不是waitpid函数的
  3.处理后台进程sigchld的信号的handler不要阻塞。

其实，我觉得很多工作已经给你提供了，我们需要写的并不多，而且信号控制只要添加一些动作呢就可以了。

//eval 就是调用解析函数确定参数，然后传递给execve函数让他调用。如果是
//内置类型就立马调用，如果是可执行文件就创建子进程执行。
void eval(char *cmdline) 
{
    char *argv[MAXARGS];
    char buf[MAXLINE];
    int bg;
    pid_t pid;
    sigset_t mask;
    strcpy(buf,cmdline);
    //&后台执行返回1
    bg = parseline(buf,argv);
    //空行
    if(argv[0]==NULL)
        return;
    int builtin;
    builtin = builtin_cmd(argv);
    if(!builtin)
    {
        //前台执行,将前台执行的创建一个进程组，在前台运行中创建的子进程也全部在这个进程组中
        if(!bg)
        {
            sigemptyset(&mask);
            sigaddset(&mask,SIGCHLD);
            sigprocmask(SIG_BLOCK,&mask,NULL);
            if((pid=fork())==0)
            {
                sigprocmask(SIG_UNBLOCK,&mask,NULL);
                // 以当前进程创建进程组
                setpgid(0,0);
                if(execve(argv[0],argv,environ)<0)
                {
                printf("%s command not found\n",argv[0] );
                exit(0);
                }
            }
            addjob(jobs,pid,FG,cmdline);
            //主进程会在这里阻塞，不会到其他地方
            sigprocmask(SIG_UNBLOCK,&mask,NULL);
            waitfg(pid);
        }
        //后台执行，有signal处理
        if(bg)
        {
            //addjob会和前面的signal里delete竞争，所以锁定.
            sigemptyset(&mask);
            sigaddset(&mask,SIGCHLD);
            sigprocmask(SIG_BLOCK,&mask,NULL);
            if((pid = fork())==0)
            {
                //子进程继承父进程阻塞的信号，所以要解锁。
                sigprocmask(SIG_UNBLOCK,&mask,NULL);
                if(execve(argv[0],argv,environ)<0)
                {
                    printf("%s command not found\n",argv[0] );
                    exit(0);
                }
            }
            addjob(jobs,pid,BG,cmdline);
            printf("[%d] (%d) %s\n", pid2jid(pid),pid,cmdline);
            //父进程解锁，只有可以处理sigchld信号
            sigprocmask(SIG_UNBLOCK,&mask,NULL);
        }
    }
    return;
}

int builtin_cmd(char **argv) 
{
    //如果相等返回0,argv[0]是个指针
    if(!strcmp(argv[0],"quit"))
        exit(0);
    if(!strcmp(argv[0],"bg"))
    {
        do_bgfg(argv);
        return 1;
    }
    if(!strcmp(argv[0],"fg"))
    {
        do_bgfg(argv);
        return 1;
    }
    //jobs list all background job,
    if(!strcmp(argv[0],"jobs"))
    {
        listjobs(jobs);
        return 1;
    }
    if(!strcmp(argv[0],"&"))
        return 1;
    return 0;     /* not a builtin command */
}

/* 
 * do_bgfg - Execute the builtin bg and fg commands
 */

//bg job 把 stopped bg换成running bg
//fg job 把stopped或者running bg换到fg上
 
void do_bgfg(char **argv) 
{
    pid_t pid;
    struct job_t *job;
    //const char *s = argv[1];
    if (argv==NULL)
    {
        printf("no command arguments\n");
        return;
    }
    //jid
   if((argv[1][0]) == '%')
    {
        //temp = jid
        int jid = atoi(argv[1]+1);
        job = getjobjid(jobs,jid);
    }
    //pid
    else
    {
        int temp = atoi(argv[1]);
        pid = temp;
        job = getjobpid(jobs,pid);
    }
    if(job==NULL)
    {
        printf("%s: No such job\n",argv[1] );
        return;
    }
    else
    {
        if(!strcmp(argv[0],"bg"))
        {
            printf("[%d], (%d)  %s\n",job->jid,job->pid,job->cmdline);
            //发送sigcont
            job->state = BG;
            kill(job->pid,SIGCONT);
        }
        else 
        {
            job->state = FG;
            kill(-(job->pid),SIGCONT);
            //在这里堵塞
            waitfg(job->pid);
        }
    }
    return;
}

/* 
 * waitfg - Block until process pid is no longer the foreground process
 */
//根据hint使用busy loop
void waitfg(pid_t pid)
{
   while(pid == fgpid(jobs))
   {
    sleep(0);
   }
    return;
}

/*****************
 * Signal handlers
 *****************/

/* 
 * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever
 *     a child job terminates (becomes a zombie), or stops because it
 *     received a SIGSTOP or SIGTSTP signal. The handler reaps all
 *     available zombie children, but doesn't wait for any other
 *     currently running children to terminate.  
 */
void sigchld_handler(int sig) 
{
    pid_t pid;
    //struct job_t *job;
    //后台进程死的太快，还没来得及fg／bg就delete了,不能这样，要等
    if((pid = waitpid(-1,NULL,WNOHANG|WUNTRACED))<0)
    {
        unix_error("waitpid");
        return;
    }
    deletejob(jobs,pid);
    return;
   
}


//剩下的信号就是对于前台程序而言
/* 
 * sigint_handler - The kernel sends a SIGINT to the shell whenver the
 *    user types ctrl-c at the keyboard.  Catch it and send it along
 *    to the foreground job.  
 */
void sigint_handler(int sig) 
{
    pid_t pid;
    pid = fgpid(jobs);
    kill(-pid, SIGINT);
    //struct job_t * jobint = getjobpid(jobs, pid);
    //jobint->state = ST;
    deletejob(jobs,pid);
    return;
}

/*
 * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever
 *     the user types ctrl-z at the keyboard. Catch it and suspend the
 *     foreground job by sending it a SIGTSTP.  
 */
void sigtstp_handler(int sig) 
{
    pid_t pid;
    pid = fgpid(jobs);
    kill(-pid, SIGTSTP);
    struct job_t * jobint = getjobpid(jobs, pid);
    jobint->state = ST;
    return;
}

tsh> ./bogus
./bogus command not found
tsh> ./myspin 10
tsh> ./myspin 3 &
[1] (4099) ./myspin 3 &

tsh> ./myspin 4 &
[2] (4101) ./myspin 4 &

tsh> jobs
[1] (4099) Running ./myspin 3 &
[2] (4101) Running ./myspin 4 &
tsh> fg %1
tsh> jobs
[1] (4099) Stopped ./myspin 3 &
[2] (4101) Running ./myspin 4 &
tsh> bg %3
%3: No such job
tsh> bg %1
[1], (4099)  ./myspin 3 &

tsh> jobs
[1] (4099) Running ./myspin 3 &
[2] (4101) Running ./myspin 4 &
tsh> fg %1
tsh> quit

最后的测试结果。
